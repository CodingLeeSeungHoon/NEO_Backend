plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.2'
	id 'io.spring.dependency-management' version '1.1.2'

	// queryDSL
	id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"

}

group = 'com.neo'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = "17"
}

repositories {
	mavenCentral()
}

// add
configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}


dependencies {

	// related spring web
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-hateoas'
	implementation 'org.springframework.boot:spring-boot-starter-validation'


	// security & oauth
	// implementation 'org.springframework.boot:spring-boot-starter-security'

	// related with RDB & NoSQL & Cache
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'


	// lombok library
	implementation 'org.projectlombok:lombok:1.18.26'
	annotationProcessor 'org.projectlombok:lombok:1.18.26'

	// mapstruct library, must be located behind lombok.
	implementation 'org.mapstruct:mapstruct:1.5.3.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'

	// swagger implement
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'

	// Querydsl 추가
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"


	// mysql driver
	runtimeOnly 'com.mysql:mysql-connector-j'


	// for test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
}


tasks.named('test') {
	useJUnitPlatform()
}

targetCompatibility = JavaVersion.VERSION_17

// queryDSL 추가 : QueryDSL 빌드 옵션
def querydslDir = "$buildDir/generated/querydsl"

querydsl {
	jpa = true
	querydslSourcesDir = querydslDir
}
sourceSets {
	main.java.srcDir querydslDir
}
configurations {
	querydsl.extendsFrom compileClasspath
}
compileQuerydsl {
	options.annotationProcessorPath = configurations.querydsl
}